import base64
from io import BytesIO

# Dữ liệu bạn dán vào đây (chỉ phần `data`, sau khi base64 decoded)
data_b64= "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"
payload = base64.b64decode(data_b64)

import base64
import subprocess
import struct

def create_ivf_header(codec: bytes, width: int, height: int, frame_rate: int, frame_count: int, frame_size: int) -> bytes:
    header = b'DKIF'                      # Signature
    header += struct.pack('<H', 0)        # Version
    header += struct.pack('<H', 32)       # Header size
    header += codec                       # FourCC (b'VP80')
    header += struct.pack('<H', width)    # Width
    header += struct.pack('<H', height)   # Height
    header += struct.pack('<I', frame_rate)  # Frame rate
    header += struct.pack('<I', 1)        # Time scale
    header += struct.pack('<I', frame_count) # Frame count
    header += struct.pack('<I', 0)        # Unused
    return header

def create_frame_header(frame_size: int, timestamp: int = 0) -> bytes:
    return struct.pack('<I', frame_size) + struct.pack('<Q', timestamp)

def decode_vp8_to_png(vp8_payload: bytes, output_path="frame.png", width=640, height=480):
    frame_header = create_frame_header(len(vp8_payload))
    ivf_header = create_ivf_header(b'VP80', width, height, 30, 1, len(vp8_payload))

    with open("frame.ivf", "wb") as f:
        f.write(ivf_header)
        f.write(frame_header)
        f.write(vp8_payload)

    subprocess.run([
        "ffmpeg", "-y",
        "-f", "ivf", "-i", "frame.ivf",
        "-frames:v", "1",
        output_path
    ])

    print(f"Frame decoded and saved to {output_path}")


decode_vp8_to_png(payload, "test.png", width=640, height=480)
